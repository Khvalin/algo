/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
  let visited = {}
  const initialMap = {}

  const visit = (x) => {
    let res = { nodes: [], count: 1 }
    if (visited[x]) {
      return res
    }

    if (initialMap[x]) {
      res.nodes.push(x)
    }

    visited[x] = true

    for (let i = 0; i < graph.length; i++) {
      if (!visited[i] && graph[x][i]) {
        res.count++
        let v = visit(i)
        res.nodes = res.nodes.concat(v.nodes)
        res.count += v.count
      }
    }

    return res
  }

  let res = initial[0]
  for (n of initial) {
    initialMap[n] = true
    if (res > n) {
      res = n
    }
  }

  let maxLen = 0
  for (let i = 0; i < graph.length; i++) {
    if (!visited[i]) {
      const a = visit(i)
      // console.log(a)
      if (a.count && a.count > maxLen) {
        if (a.nodes.length == 1) {
          maxLen = a.count
          res = a.nodes[0]
        }
      }
    }
  }

  return res
}

/*
console.log(minMalwareSpread([ [ 1, 1, 0 ], [ 1, 1, 0 ], [ 0, 0, 1 ] ], [ 0, 1 ]))
console.log(minMalwareSpread([ [ 1, 1, 1 ], [ 1, 1, 1 ], [ 1, 1, 1 ] ], [ 1, 2 ]))
console.log(minMalwareSpread([ [ 1, 0, 0, 0 ], [ 0, 1, 0, 0 ], [ 0, 0, 1, 1 ], [ 0, 0, 1, 1 ] ], [ 3, 1 ]))
*/

console.log(
  minMalwareSpread(
    [
      [ 1, 0, 0, 1, 0, 0, 0 ],
      [ 0, 1, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0, 0 ],
      [ 1, 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 1, 0, 1 ],
      [ 0, 0, 0, 0, 0, 1, 0 ],
      [ 0, 0, 0, 0, 1, 0, 1 ]
    ],
    [ 6, 2 ]
  )
)
